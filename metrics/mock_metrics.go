// Code generated by MockGen. DO NOT EDIT.
// Source: ./metrics_svc.go

// Package metrics is a generated GoMock package.
package metrics

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tally "github.com/uber-go/tally/v4"
)

// MockMetricsSvc is a mock of MetricsSvc interface.
type MockMetricsSvc struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsSvcMockRecorder
}

// MockMetricsSvcMockRecorder is the mock recorder for MockMetricsSvc.
type MockMetricsSvcMockRecorder struct {
	mock *MockMetricsSvc
}

// NewMockMetricsSvc creates a new mock instance.
func NewMockMetricsSvc(ctrl *gomock.Controller) *MockMetricsSvc {
	mock := &MockMetricsSvc{ctrl: ctrl}
	mock.recorder = &MockMetricsSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsSvc) EXPECT() *MockMetricsSvcMockRecorder {
	return m.recorder
}

// Capabilities mocks base method.
func (m *MockMetricsSvc) Capabilities() tally.Capabilities {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Capabilities")
	ret0, _ := ret[0].(tally.Capabilities)
	return ret0
}

// Capabilities indicates an expected call of Capabilities.
func (mr *MockMetricsSvcMockRecorder) Capabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capabilities", reflect.TypeOf((*MockMetricsSvc)(nil).Capabilities))
}

// Counter mocks base method.
func (m *MockMetricsSvc) Counter(name string) tally.Counter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Counter", name)
	ret0, _ := ret[0].(tally.Counter)
	return ret0
}

// Counter indicates an expected call of Counter.
func (mr *MockMetricsSvcMockRecorder) Counter(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Counter", reflect.TypeOf((*MockMetricsSvc)(nil).Counter), name)
}

// CounterWithTags mocks base method.
func (m *MockMetricsSvc) CounterWithTags(name string, tags map[string]string) tally.Counter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CounterWithTags", name, tags)
	ret0, _ := ret[0].(tally.Counter)
	return ret0
}

// CounterWithTags indicates an expected call of CounterWithTags.
func (mr *MockMetricsSvcMockRecorder) CounterWithTags(name, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CounterWithTags", reflect.TypeOf((*MockMetricsSvc)(nil).CounterWithTags), name, tags)
}

// Gauge mocks base method.
func (m *MockMetricsSvc) Gauge(name string) tally.Gauge {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gauge", name)
	ret0, _ := ret[0].(tally.Gauge)
	return ret0
}

// Gauge indicates an expected call of Gauge.
func (mr *MockMetricsSvcMockRecorder) Gauge(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gauge", reflect.TypeOf((*MockMetricsSvc)(nil).Gauge), name)
}

// GaugeWithTags mocks base method.
func (m *MockMetricsSvc) GaugeWithTags(name string, tags map[string]string) tally.Gauge {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GaugeWithTags", name, tags)
	ret0, _ := ret[0].(tally.Gauge)
	return ret0
}

// GaugeWithTags indicates an expected call of GaugeWithTags.
func (mr *MockMetricsSvcMockRecorder) GaugeWithTags(name, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GaugeWithTags", reflect.TypeOf((*MockMetricsSvc)(nil).GaugeWithTags), name, tags)
}

// GetRootScope mocks base method.
func (m *MockMetricsSvc) GetRootScope() tally.Scope {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootScope")
	ret0, _ := ret[0].(tally.Scope)
	return ret0
}

// GetRootScope indicates an expected call of GetRootScope.
func (mr *MockMetricsSvcMockRecorder) GetRootScope() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootScope", reflect.TypeOf((*MockMetricsSvc)(nil).GetRootScope))
}

// Histogram mocks base method.
func (m *MockMetricsSvc) Histogram(name string, buckets tally.Buckets) tally.Histogram {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Histogram", name, buckets)
	ret0, _ := ret[0].(tally.Histogram)
	return ret0
}

// Histogram indicates an expected call of Histogram.
func (mr *MockMetricsSvcMockRecorder) Histogram(name, buckets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Histogram", reflect.TypeOf((*MockMetricsSvc)(nil).Histogram), name, buckets)
}

// HistogramWithTags mocks base method.
func (m *MockMetricsSvc) HistogramWithTags(name string, buckets tally.Buckets, tags map[string]string) tally.Histogram {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HistogramWithTags", name, buckets, tags)
	ret0, _ := ret[0].(tally.Histogram)
	return ret0
}

// HistogramWithTags indicates an expected call of HistogramWithTags.
func (mr *MockMetricsSvcMockRecorder) HistogramWithTags(name, buckets, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HistogramWithTags", reflect.TypeOf((*MockMetricsSvc)(nil).HistogramWithTags), name, buckets, tags)
}

// SubScope mocks base method.
func (m *MockMetricsSvc) SubScope(name string) tally.Scope {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubScope", name)
	ret0, _ := ret[0].(tally.Scope)
	return ret0
}

// SubScope indicates an expected call of SubScope.
func (mr *MockMetricsSvcMockRecorder) SubScope(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubScope", reflect.TypeOf((*MockMetricsSvc)(nil).SubScope), name)
}

// Tagged mocks base method.
func (m *MockMetricsSvc) Tagged(tags map[string]string) tally.Scope {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tagged", tags)
	ret0, _ := ret[0].(tally.Scope)
	return ret0
}

// Tagged indicates an expected call of Tagged.
func (mr *MockMetricsSvcMockRecorder) Tagged(tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tagged", reflect.TypeOf((*MockMetricsSvc)(nil).Tagged), tags)
}

// Timer mocks base method.
func (m *MockMetricsSvc) Timer(name string) tally.Timer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timer", name)
	ret0, _ := ret[0].(tally.Timer)
	return ret0
}

// Timer indicates an expected call of Timer.
func (mr *MockMetricsSvcMockRecorder) Timer(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timer", reflect.TypeOf((*MockMetricsSvc)(nil).Timer), name)
}

// TimerWithTags mocks base method.
func (m *MockMetricsSvc) TimerWithTags(name string, tags map[string]string) tally.Timer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimerWithTags", name, tags)
	ret0, _ := ret[0].(tally.Timer)
	return ret0
}

// TimerWithTags indicates an expected call of TimerWithTags.
func (mr *MockMetricsSvcMockRecorder) TimerWithTags(name, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimerWithTags", reflect.TypeOf((*MockMetricsSvc)(nil).TimerWithTags), name, tags)
}
